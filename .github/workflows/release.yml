# filepath: .github/workflows/release.yml

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag for this release (e.g., v1.2.3)'
        required: true
        type: string
      draft:
        description: 'Create as draft release'
        required: false
        default: true
        type: boolean

permissions:
  contents: write  # This allows the action to create releases

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for version history

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Update version in package.json
        id: update_version
        run: |
          # Extract version from tag (e.g., v1.2.3 -> 1.2.3)
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Use the manually provided tag from workflow_dispatch
            RAW_TAG="${{ github.event.inputs.tag_name }}"
          else
            # Use the tag that triggered the workflow
            RAW_TAG=${GITHUB_REF#refs/tags/}
          fi
          
          # Remove 'v' prefix if present
          TAG_VERSION=${RAW_TAG#v}
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
          echo "RAW_TAG=$RAW_TAG" >> $GITHUB_ENV
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          
          if [ "$CURRENT_VERSION" != "$TAG_VERSION" ]; then
            echo "Updating version from $CURRENT_VERSION to $TAG_VERSION"
            # Use Node.js to update the version in package.json
            node -e "
              const fs = require('fs');
              const package = JSON.parse(fs.readFileSync('./package.json'));
              package.version = '$TAG_VERSION';
              fs.writeFileSync('./package.json', JSON.stringify(package, null, 2) + '\n');
            "
          else
            echo "Version is already up to date ($CURRENT_VERSION)"
          fi
          
          echo "VSIX_FILE=tech-debt-extension-$TAG_VERSION.vsix" >> $GITHUB_ENV

      # Create and ensure tag exists (moved before release creation)
      - name: Ensure tag exists
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if the tag already exists locally
          if git rev-parse "${{ env.RAW_TAG }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.RAW_TAG }} already exists locally"
          else
            echo "Creating tag ${{ env.RAW_TAG }} locally"
            git tag -a "${{ env.RAW_TAG }}" -m "Release ${{ env.RAW_TAG }}"
          fi
          
          # Check if the tag exists on remote
          if git ls-remote --tags origin | grep -q "refs/tags/${{ env.RAW_TAG }}$"; then
            echo "Tag ${{ env.RAW_TAG }} already exists on remote"
          else
            echo "Pushing tag ${{ env.RAW_TAG }} to remote"
            git push origin "${{ env.RAW_TAG }}"
          fi

      - name: Build extension
        run: yarn run compile

      - name: Run linting
        run: yarn run lint
        
      - name: Package VSIX
        run: yarn run build-vsix

      - name: Install GitHub CLI
        run: |
          sudo apt install gh -y

      - name: Extract Changelog Section
        id: extract_changelog
        run: |
          echo "Extracting changelog for version ${{ env.TAG_VERSION }}"
          
          # Simple extraction script that's more reliable
          VERSION_PATTERN="## \\[${{ env.TAG_VERSION }}\\]"
          
          # Get the line number where this version starts
          START_LINE=$(grep -n "$VERSION_PATTERN" CHANGELOG.md | cut -d ':' -f 1)
          
          if [ -z "$START_LINE" ]; then
            echo "::warning::Version ${{ env.TAG_VERSION }} not found in CHANGELOG.md"
            echo "See full release notes for details." > changelog_section.md
            echo "CHANGELOG_EXTRACTED=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Find the line number of the next version section or end of file
          NEXT_VERSION_LINE=$(tail -n "+$((START_LINE + 1))" CHANGELOG.md | grep -n "^## \[" | head -n 1 | cut -d ':' -f 1)
          
          if [ -z "$NEXT_VERSION_LINE" ]; then
            # Extract from this version to the end of file
            tail -n "+$START_LINE" CHANGELOG.md > changelog_section.md
          else
            # Calculate the last line to extract
            LAST_LINE=$((START_LINE + NEXT_VERSION_LINE - 1))
            # Extract the section
            sed -n "${START_LINE},${LAST_LINE}p" CHANGELOG.md > changelog_section.md
          fi
          
          echo "Extracted changelog section:"
          cat changelog_section.md
          
          echo "CHANGELOG_EXTRACTED=true" >> $GITHUB_ENV

      - name: Create GitHub Release and Upload VSIX
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release notes file
          echo "# Tech Debt Manager v${{ env.TAG_VERSION }}" > release_notes.md
          echo "" >> release_notes.md
          
          # Add extracted changelog section if it exists
          if [ -f "changelog_section.md" ]; then
            echo "## What's Changed" >> release_notes.md
            echo "" >> release_notes.md
            
            # Exclude the version header line from changelog_section.md
            grep -v "^## " changelog_section.md >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          echo "## Installation" >> release_notes.md
          echo "Download the VSIX file from this release and install it manually in VS Code:" >> release_notes.md
          echo '1. Go to Extensions view (`Ctrl+Shift+X`)' >> release_notes.md
          echo '2. Click the "..." menu in the top-right' >> release_notes.md
          echo '3. Select "Install from VSIX..."' >> release_notes.md
          echo '4. Choose the downloaded VSIX file' >> release_notes.md
          
          # Debug information
          echo "Debug: Final release notes content:"
          cat release_notes.md
          
          echo "Debug: Checking repository info"
          gh repo view

          # Create the release (draft or not depending on input)
          # Check if VSIX file exists
          if [ ! -f "${{ env.VSIX_FILE }}" ]; then
            echo "::error::VSIX file not found: ${{ env.VSIX_FILE }}"
            exit 1
          fi
          
          # Determine draft status based on workflow trigger
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.draft }}" == "false" ]; then
            echo "Creating a public release..."
            gh release create "${{ env.RAW_TAG }}" \
              --title "Tech Debt Manager v${{ env.TAG_VERSION }}" \
              --notes-file release_notes.md
          else
            echo "Creating a draft release..."
            gh release create "${{ env.RAW_TAG }}" \
              --title "Tech Debt Manager v${{ env.TAG_VERSION }}" \
              --notes-file release_notes.md \
              --draft
          fi
            
          # Upload the asset
          gh release upload "${{ env.RAW_TAG }}" "${{ env.VSIX_FILE }}" --clobber
      
      - name: Commit version change
        if: env.CURRENT_VERSION != env.TAG_VERSION && github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "ci: bump version to ${{ env.TAG_VERSION }}"
          
          # Push changes to package.json
          git push
